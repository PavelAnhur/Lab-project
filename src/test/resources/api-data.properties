# Urls
uri.api.coursera.org=https://api.coursera.org
uri.coursera.community=https://coursera.community
uri.learner.coursera.help=https://learner.coursera.help
uri.master.track.certificates=https://segments.company-target.com
uri.coursera.org=https://www.coursera.org
uri.accounts.coursera.org=https://accounts.coursera.org
uri.status.coursera.org=https://status.coursera.org
url.target.coursera.for.student=https://www.coursera.org/for-university-and-college-students/?utm_source=mobile&utm_medium=share&utm_campaign=social_icons_freecourseraforstudents
url.target.custom.url.creation=https://www.coursera.org/here_is_my_custom_url/
# Endpoints
endpoint.for.learner.help.test=/api/v2/help_center/en-us/articles.json
endpoint.auth=/oauth2/v1/auth
endpoint.materials.api=/api/onDemandCourseMaterials.v2/
endpoint.coursera.for.student=/api/customUrls.v1
endpoint.status.api=/api/v2/status.json
endpoint.courses.api=api/courses.v1
endpoint.schedule.api=/api/learnerCourseSchedules.v1/undefined
endpoint.custom.urls.api=/api/customUrls.v1
endpoint.graph.ql=/graphqlBatch
endpoint.instructors.api=api/instructors.v1
endpoint.partners.api=api/partners.v1
endpoint.qualification=/api/qualificationSurveySectionResponses.v2
endpoint.user.by.id=/member/getUsersById
endpoint.phrases=/phrase/batch
endpoint.helpfulness=/helpfulness/vote
endpoint.alice.messages.api=/api/aliceMessages.v1/
endpoint.eventing.info.batch=/eventing/infoBatch.v2
endpoint.user.preferences=/api/userPreferences.v1/
# Queries
query.catalog.degrees.data=query CatalogDegreeData($liveOnly: Boolean!) {CatalogDegreesV1Resource {getAll(liveOnly: $liveOnly) {elements {id name slug languageCode bannerImage marketingName catalogAvailabilityStatus partners {elements {id shortName name productBrandingLogo squareLogo landingPageBanner primaryColor __typename} __typename}partnerIds domainIds __typename}__typename}__typename}}
query.all.domains=query DomainGetAllQuery {DomainsV1Resource {domains: getAll {elements {id slug name description backgroundImageUrl subdomains {elements {id slug name domainId description __typename}__typename}__typename}__typename}__typename}}
query.banner.campaigns.data=query BannerAdCampaignsV1Query($placement: String!, $bannerCount: Int!) {BannerAdCampaignsV1Resource {byPlacement(placement: $placement, bannerCount: $bannerCount) {elements {id callToActionUrl placement promotedEntityId creative {imageUrl partnerName titleText bodyText callToActionText backgroundColor __typename}__typename}__typename}__typename}}
query.professional.certificates.data=query ProfessionalCertificatesData {ProfessionalCertsV1Resource {getAll {elements {id name slug tagline partnerSquareLogo thumbnail partnerIds __typename}__typename}__typename}}
query.multiple.get.partners=query PartnersQuery($ids: [String!]!) {PartnersV1Resource {multiGet(ids: $ids) {elements {id name}}}}
query.mega.menu.with.domain=query MegaMenuQuery($ids: [String!]!) {DomainsV1Resource {domains: multiGet(ids: $ids) {elements {id name description subdomains {elements {id name domainId description} paging {total}}}}}}
query.collection=query CollectionQuery($contextType: String!, $contextId: String!, $skip: Boolean = false, $numEntriesPerCollection: Int, $limit: Int, $start: String = "0") { BrowseCollectionsV1Resource @skip(if: $skip) { byCollections(contextType: $contextType, contextId: $contextId, numEntriesPerCollection: $numEntriesPerCollection, limit: $limit, start: $start) { elements { label id linkedCollectionPageMetadata { url label} debug entries { id courseId onDemandSpecializationId resourceName score isPartOfCourseraPlus isFreeCertificate} courses { elements { ...LightweightCourseFragment}} s12ns { elements { ...LightweightS12nFragment}}} paging { total}}}} fragment LightweightCourseFragment on CoursesV1 { id slug name photoUrl s12nIds premiumExperienceVariant level workload primaryLanguages partners { elements { id name squareLogo classLogo logo}} courseTypeMetadata { courseTypeMetadata { ...RhymeProjectFragment}}} fragment RhymeProjectFragment on CourseTypeMetadataV1_rhymeProjectMember { ... on CourseTypeMetadataV1_rhymeProjectMember { rhymeProject { typeNameIndex}}}fragment LightweightS12nFragment on OnDemandSpecializationsV1 { name id slug logo courseIds partners { elements { id name squareLogo classLogo logo}} metadata { headerImage level} productVariant}
query.collection.recommendations=query CollectionRecommendationsQuery($contextType: String!, $contextId: String!, $numEntriesPerCollection: Int) { BrowseCollectionsV1Resource { byCollections(contextType: $contextType, contextId: $contextId, numEntriesPerCollection: $numEntriesPerCollection) { elements { id entries { id} courses { elements { ...CourseFragment}} s12ns { elements { ...S12nFragment}}}}}} fragment CourseFragment on CoursesV1 { id  slug photoUrl description name courseDerivatives { id averageFiveStarRating} partners { elements { id name squareLogo}}} fragment S12nFragment on OnDemandSpecializationsV1 { id slug photoUrl: logo description derivative { id averageFiveStarRating} name partners { elements { id name squareLogo}}}
# Parameters
parameter.phrases=[[%22Forum%22,%22wysiwyg.embed.btn.title%22],[%22Forum%22,%22wysiwyg.links.btn.title%22],[%22Common%22,%22editor.paragraph%22],[%22Common%22,%22editor.add%22],[%22Common%22,%22editor.table%22],[%22Common%22,%22editor.code.language%22],[%22Common%22,%22editor.formatting.styles%22],[%22Forum%22,%22topic.editor.poll.question.title%22],[%22Forum%22,%22topic.editor.poll.answers.title%22],[%22Forum%22,%22topic.editor.poll.answers.placeholder%22],[%22Control%22,%22poll.placeholder.question%22],[%22Forum%22,%22Remove+poll%22]]
